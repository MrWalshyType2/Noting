// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Noting.Data;

namespace Noting.Migrations
{
    [DbContext(typeof(MvcNoteContext))]
    [Migration("20210115171118_AddedNotMappedAttr")]
    partial class AddedNotMappedAttr
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Noting.Models.Note", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("AutomaticIdLinking")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subtopic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Topic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("Noting.Models.NoteRelation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChildId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.ToTable("NoteRelation");
                });

            modelBuilder.Entity("Noting.Models.SpacedRepetitionAttempt", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AttemptDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Correct")
                        .HasColumnType("bit");

                    b.Property<string>("SpacedRepetitionHistoryId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SpacedRepetitionHistoryId");

                    b.ToTable("SpacedRepetitionAttempts");
                });

            modelBuilder.Entity("Noting.Models.SpacedRepetitionHistory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("NextScheduledAttempt")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NoteId")
                        .IsUnique()
                        .HasFilter("[NoteId] IS NOT NULL");

                    b.ToTable("SpacedRepetitionHistories");
                });

            modelBuilder.Entity("Noting.Models.NoteRelation", b =>
                {
                    b.HasOne("Noting.Models.Note", "Child")
                        .WithMany("Children")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Child");
                });

            modelBuilder.Entity("Noting.Models.SpacedRepetitionAttempt", b =>
                {
                    b.HasOne("Noting.Models.SpacedRepetitionHistory", "SpacedRepetitionHistory")
                        .WithMany("SpacedRepetitionAttempts")
                        .HasForeignKey("SpacedRepetitionHistoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("SpacedRepetitionHistory");
                });

            modelBuilder.Entity("Noting.Models.SpacedRepetitionHistory", b =>
                {
                    b.HasOne("Noting.Models.Note", "Note")
                        .WithOne("SpacedRepetitionHistory")
                        .HasForeignKey("Noting.Models.SpacedRepetitionHistory", "NoteId");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("Noting.Models.Note", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("SpacedRepetitionHistory");
                });

            modelBuilder.Entity("Noting.Models.SpacedRepetitionHistory", b =>
                {
                    b.Navigation("SpacedRepetitionAttempts");
                });
#pragma warning restore 612, 618
        }
    }
}
